General:
 * Write documentation (WIP)
 * Find a way for the ParseTree to return the correct type (pretty straightforward now but waiting for C++ review first)
 * Remove Non terminal default return value (it will be useless once the ParseTree will be able to return the correct type)
 * Stop parsing on the first error...
 * Make Error Codes consistant (ErrorCode class with all error codes done but not used). Once done, add the ability to silent warnings.

 C++:
 * Review C++ generated code and improve it (more use of templates ???)
 * ParseTree should be returns as shared_ptr ?
 
Prospecting/Long Term:
 * Add my backtracking parser as a possible implementation (in addition to LL(1))
 * Remove VB support
 * Add a Search (and SearchXXX) method (in addition to Parse (and ParseXXX)) in the Parser
 * Add python and javascript generation
 * Add a Comment attribute to be able to add comments to the EvalXXX methods (ex: specify the expected param list (which is params object[] or equivalent) to the method via documentation comments)
 * Add a Parameters attribute (to be able to specify the parameters of the EvalXXX function and their type instead of the params object[] parameters)
 * Allows void return type ??
 * Replace CodeDom with Roslyn ??
 * Implement a Visual Studio (and VSCode) Extension (via Language Server Protocol) (for VSCode, tmLanguage grammar is done, example of task is done too)
 * Step by step parsing for debug purpose
 * Ability to map error line in the produced file (while compiling it) to the grammar file (the code block in grammar file)











Optimisation tests:
Code:
			string pattern = "List<";
			string content = File.ReadAllText(@"..\..\ParseTree.cs");
			Regex r;
			DateTime startTime;
			int count;

			r = new Regex(@"List<", RegexOptions.Compiled);
			Console.WriteLine("Regex List< substring");
			startTime = DateTime.Now;
			count = 0;
			for (int k = 0; k<1000; k++)
				for (int i = 0; i<content.Length; i++)
				{
					var c = content.Substring(i);
					var m = r.Match(c);
					if (m.Success && m.Index == 0)
						count++;
				}
			Console.WriteLine((DateTime.Now - startTime).TotalMilliseconds);
			Console.WriteLine(count.ToString());

			r = new Regex(@"\GList<", RegexOptions.Compiled);
			Console.WriteLine("Regex \\GList< substring");
			startTime = DateTime.Now;
			count = 0;
			for (int k = 0; k<1000; k++)
				for (int i = 0; i<content.Length; i++)
				{
					var c = content.Substring(i);
					var m = r.Match(c);
					if (m.Success && m.Index == 0)
						count++;
				}
			Console.WriteLine((DateTime.Now - startTime).TotalMilliseconds);
			Console.WriteLine(count.ToString());

			r = new Regex(@"\GList<", RegexOptions.Compiled);
			Console.WriteLine("Regex \\GList< index");
			startTime = DateTime.Now;
			count = 0;
			for (int k = 0; k<1000; k++)
				for (int i = 0; i<content.Length; i++)
				{
					var m = r.Match(content, i);
					if (m.Success)
						count++;
				}
			Console.WriteLine((DateTime.Now - startTime).TotalMilliseconds);
			Console.WriteLine(count.ToString());

			Console.WriteLine("string.IndexOf");
			startTime = DateTime.Now;
			count = 0;
			for (int k = 0; k<1000; k++)
				for (int i = 0; i<content.Length-pattern.Length; i++)
				{
					if (content.IndexOf(pattern, i, pattern.Length, StringComparison.Ordinal) == i)
						count++;
				}
			Console.WriteLine((DateTime.Now - startTime).TotalMilliseconds);
			Console.WriteLine(count.ToString()); 
			
			Console.WriteLine("string.LastIndexOf");
			startTime = DateTime.Now;
			count = 0;
			for (int k = 0; k<1000; k++)
				for (int i = 0; i<content.Length-pattern.Length; i++)
				{
					if (content.LastIndexOf(pattern, i+pattern.Length, pattern.Length, StringComparison.Ordinal) >= 0)
						count++;
				}
			Console.WriteLine((DateTime.Now - startTime).TotalMilliseconds);
			Console.WriteLine(count.ToString());

			Console.WriteLine("string.Substring == ");
			startTime = DateTime.Now;
			count = 0;
			for (int k = 0; k<1000; k++)
				for (int i = 0; i<content.Length-pattern.Length; i++)
				{
					if (content.Substring(i, pattern.Length) == pattern)
						count++;
				}
			Console.WriteLine((DateTime.Now - startTime).TotalMilliseconds);
			Console.WriteLine(count.ToString());

Results:
Regex List< substring
15444,5756
7000
Regex \GList< substring
8769,2289
7000
Regex \GList< index
415,0928
7000
string.IndexOf
240,5434
7000
string.LastIndexOf
244,6155
7000
string.Substring ==
128,1088
7000