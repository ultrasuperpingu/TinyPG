General:
 * Write documentation (WIP)
 * Find a way for the ParseTree to return the correct type (pretty straightforward now but waiting for C++ review first)
 * Remove Non terminal default return value (it will be useless once the ParseTree will be able to return the correct type)
 * Stop parsing on the first error...
 * Make Error Codes consistant (ErrorCode class with all error codes done but not used). Once done, add the ability to silent warnings.
 * Add a Comment attribute to be able to add comments to the EvalXXX methods (ex: specify the expected param list (which is params object[] or equivalent) to the method via documentation comments)
C++:
 * Review C++ generated code and improve it (more use of templates ???)
 * ParseTree should be returns as shared_ptr ?
 
Prospecting/Long Term:
 * Add my backtracking parser as a possible implementation (in addition to LL(1))
 * Remove VB support
 * Add a Search (and SearchXXX) method (in addition to Parse (and ParseXXX)) in the Parser
 * Add python and javascript generation
 * Add a Parameters attribute (to be able to specify the parameters of the EvalXXX function and their type instead of the params object[] parameters)
 * Allows void return type ??
 * Replace CodeDom with Roslyn ??
 * Implement a Visual Studio (and VSCode) Extension (via Language Server Protocol) (for VSCode, tmLanguage grammar is done, example of task is done too)
 * Step by step parsing for debug purpose
 * Ability to map error line in the produced file (while compiling it) to the grammar file (the code block in grammar file)
