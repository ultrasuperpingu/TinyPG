// @TinyPG - a Tiny Parser Generator v1.6
// Copyright Â© Herre Kuijpers 2008-2012, modified by ultrasuperpingu (2023)
// this grammar describes the BNF notation

// Incorporated revisions by William A. McKee Aug. 14, 2008

<% @TinyPG Namespace="TinyPG.Parsing" %>

// Terminals:
BRACKETOPEN         -> @"\(";
BRACKETCLOSE        -> @"\)";
CODEBLOCK           -> @"\{[^\}]*\}([^};][^}]*\}+)*;";
COMMA               -> @",";
SQUAREOPEN          -> @"\[";
SQUARECLOSE         -> @"\]";
ASSIGN              -> @"=";
PIPE                -> @"\|";
SEMICOLON           -> @";";
COLON               -> @":";
DEFAULT             -> @"default";
UNARYOPER           -> @"(\*|\+|\?)";
IDENTIFIER          -> @"[a-zA-Z_][a-zA-Z0-9_]*";
TYPE                -> @"((?!default|;|\{).)*"; // not followed by [spaces]default|;|{
INTEGER             -> @"[0-9]+";
DOUBLE              -> @"[0-9]*\.[0-9]+";
HEX                 -> @"(0x[0-9a-fA-F]{6})";
ARROW               -> @"->";
DIRECTIVEOPEN       -> @"<%\s*@";
DIRECTIVECLOSE      -> @"%>";
EOF_                -> @"$";
STRING              -> @"\""(\\\""|[^\""])*\""";
VERBATIM_STRING     -> @"(R|@)\""(\""\""|[^\""])*\""";
REGEX_PATTERN       -> @"/(\/|[^/])+/";
DEFAULT_VALUE       -> @"[_a-zA-Z0-9.<>#@\""]+";

[Skip]
WHITESPACE          -> @"\s+";

[Skip]
COMMENTLINE         -> @"//[^\n]*\n?";

[Skip]
COMMENTBLOCK        -> @"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/";

// Production lines LL(1):
Start               -> Directive* ExtProduction* EOF_ : Grammar;
Directive           -> DIRECTIVEOPEN IDENTIFIER NameValue* DIRECTIVECLOSE;
NameValue           -> IDENTIFIER ASSIGN (VERBATIM_STRING|STRING|CODEBLOCK);
ExtProduction       -> Attribute* Production;
Attribute           -> SQUAREOPEN IDENTIFIER ( BRACKETOPEN Params? BRACKETCLOSE )? SQUARECLOSE;
Params              -> Param (COMMA Param)* : object[];
Param               -> INTEGER | DOUBLE | STRING | HEX;
Production          -> IDENTIFIER ARROW Rule (COLON TYPE (DEFAULT BRACKETOPEN DEFAULT_VALUE BRACKETCLOSE)?)? (CODEBLOCK | SEMICOLON);
Rule                -> VERBATIM_STRING | STRING | Subrule;
Subrule             -> ConcatRule (PIPE ConcatRule)* : Rule;
ConcatRule          -> Symbol+ : Rule;
Symbol              -> (IDENTIFIER | (BRACKETOPEN Subrule BRACKETCLOSE) ) UNARYOPER? : Rule; 

