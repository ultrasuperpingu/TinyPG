//@TinyPG - a Tiny Parser Generator v1.6
//Copyright Â© Herre Kuijpers 2008-2010, modified by ultrasuperpingu 2023
//Simple expression - example of an mathematical expression parser

// The TinyPG Directive allows to specify the following parameters:
// * Language: c#, cs, csharp, vb, vb.net, vbnet, visualbasic,
// 		 java, cpp, c++, rs, rust, py, python (case insensitive). Default is C#.
// * Namespace: The namespace of the generated code. This can't be empty. Default is TinyPG.
// * OutputPath: The directory where the generated files will be produced.
//			The default value is the current directory.
//			If a relative path is specified, it will be interpretted as relative to the grammar file
// * TemplatePath: The directory where the template files used for generation will be found.
//			The default value is language dependant but will be in {ExeFileDir}\Template\{Language}
//			If a relative path is specified, it will be interpretted as relative to the grammar file
// * RegexCompiled: For .net languages, specify if the Regex are instanciated with the RegexOption.Compiled option. Default is true.
<% @TinyPG Language="C#" Namespace="TinyPG.SimpleExpr" OutputPath="." RegexCompiled="true" %>

// The Parser Directive allows to specify the following parameters:
// * Generate: Is the parser has to be generated. Default is true.
<% @Parser Generate="true"%>
// The ParseTree Directive allows to specify the following parameters:
// * Generate: Is the parser tree file (which contains evaluation code or is the base class for it) has to be generated. Default is true.
<% @ParseTree Generate="true"%>
// The Scanner Directive allows to specify the following parameters:
// * Generate: Is the scanner file has to be generated. Default is true.
// * CustomCode: Custom code to be included in the body of the Scanner class. Default is "".
<% @Scanner Generate="true"%>
// The TextHighlighter Directive (not allowed in none .net languages for now) allows to specify the following parameters:
// * Generate: Is the text highlighter file has to be generated. Default is false.
<% @TextHighlighter Generate="true"%>

// For all directive, you can specify any attribute which value will be replaced in the template file with the content.
//  for example, if you set an attribute Test="My Content" in the Parser directive, any <%Test%> text in the Scanner template file will be replaced by: My Content

// Terminal rules:
//  The terminal rules are specified with the following syntax:
//    [Attribute] TokenName -> Regex;
//      * Attribute: Optional attribute. A attribute name which can optionally be followed by parameters (ie. AttributeName(Param1, Param2, ...).
//                   The attribute is specified between square brackets. All the accepted attributes are described thereafter.
//      * TokenName: the name of the rule. By convention, it is recommanded to use UPPERCASE.
//      * Regex: the regex to match for the terminal symbol, specified with a verbatim string.
//               Leading @ is optional but even without it, the string will be interpreted as verbatim.

// The Color attribute (allowed on terminal terms), specify the color (integer rgb format) of the token in the text highlighter (used in the Expression Evaluator window).
[Color(15,15,180)]
NUMBER 	-> @"[0-9]+";
// The IgnoreCase attribute add the RegexOption.IgnoreCase to the regex creation option for this terminal term.. Can't be used on non terminal rules.
[IgnoreCase]
[Color(15,180,15)]
PLUSMINUS	->	@"(\+|-)";
[Color(15,180,15)]
MULTDIV	->	@"\*|/";
[Color(180,15,15)]
BROPEN		->	@"\(";
[Color(180,15,15)]
BRCLOSE	-> 	@"\)";
EOF		->	@"$";

// The Skip attribute tells the parser to ignore this token. Can't be used on non terminal rules.
[Skip] WHITESPACE  -> @"\s+";


// Terminal rules:
//  The terminal rules are specified with the following syntax:
//    RuleName -> Rule : ReturnTypeName default(DefaultValue);
//
//      * RuleName: the name of the rule. By convention, it is recommanded to use CamelCase.
//      * Rule: BNF syntax rule.
//      * ReturnTypeName: the return type of the rule. This is optional (ie. "RuleName -> Rule;" is a valid rule).
//                        Default is object or equivalent for most language. C++ default is void*.
//      * DefaultValue: the optional (ie. "RuleName -> Rule : ReturnType;" is a valid rule) default return value of the rule.
//                      Default is null or equivalent in most language.
//
//  An optional code block containing custom code to evaluate the rule can be supplied at the end of the rule.
//    See simple expression2.tpg to have examples of this.


// Start is by convention the main rule to be matched by the parser.
Start 		-> (AddExpr)? EOF : int default(5);
[Comment("Handle an expression like: x+5+12")]
AddExpr 	-> MultExpr (PLUSMINUS MultExpr)* : int;
MultExpr 	-> Atom (MULTDIV Atom)* : List<string>;
Atom 		-> NUMBER | BROPEN AddExpr BRCLOSE;
