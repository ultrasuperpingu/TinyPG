//@TinyPG - a Tiny Parser Generator v1.5
//Copyright Â© Herre Kuijpers 2008-2010, modified by ultrasuperpingu 2023
//Simple expression calculator
<% @TinyPG Language="C#" Namespace="TinyPG" OutputPath=".\TestCSharp\SimpleExpr\" %>

// include text highlighting as part of the input window
<% @TextHighlighter Generate="true" %>

<% @ParseTree CustomCode="
		protected System.Collections.Generic.Dictionary<string,int> context;
		public System.Collections.Generic.Dictionary<string,int> Context
		{
			get
			{
				if(context == null && this.Parent != null) {
					return Parent.Context;
				}
				return context;
			}
			set
			{
				context = value;
			}
		}

		public int GetVarValue(string id)
		{
			return Context == null?0:Context[id];
		}
" %>

				EOF         	-> @"^\s*$";
[Color(255, 0, 0)] 		NUMBER 	-> @"[0-9]+";
[Color(0, 127, 0)] 		ID	 	-> @"[a-zA-Z_][a-zA-Z0-9_]*";
[Color(0, 0, 255)] 		PLUSMINUS 	-> @"(\+|-)";
[Color(0, 0, 255)] 		MULTDIV 	-> @"\*|/";
[Color(127, 0, 127)] 	BROPEN 	-> @"\(";
[Color(127, 0, 127)] 	BRCLOSE 	-> @"\)";

[Skip] 			WHITESPACE  	-> @"\s+";

Start -> AddExpr EOF : int
{ return $AddExpr; };

AddExpr -> MultExpr (PLUSMINUS MultExpr)* : int
{ 
	int Value = $MultExpr;
	int i = 1;
	while (?MultExpr[i])
	{
		string sign = $PLUSMINUS[i-1];
		if (sign == "+")
			Value += $MultExpr[i++];
		else 
			Value -= $MultExpr[i++];
	}

	return Value; 
};

MultExpr -> Atom (MULTDIV Atom)* : int
{ 
	int Value = $Atom;
	int i = 1;
	while (?Atom[i])
	{
		string sign = $MULTDIV[i-1];
		if (sign == "*")
			Value *= $Atom[i++];
		else 
			Value /= $Atom[i++];
	}
	return Value; 
};

Atom -> NUMBER | BROPEN AddExpr BRCLOSE | ID : int
{
	if (?NUMBER)
		return Convert.ToInt32($NUMBER);
	if (?ID)
		return GetVarValue($ID);
	return $AddExpr; 
};

