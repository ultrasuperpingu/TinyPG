//@TinyPG - a Tiny Parser Generator v1.5
//Copyright Â© Herre Kuijpers 2008-2010
//Simple expression calculator

// Generate VB code
<% @TinyPG Language="VB" Namespace="TinyPG" OutputPath="TestVB\SimpleExpr\" %>

// include text highlighting as part of the input window
<% @TextHighlighter Generate="true" %>

<% @ParseTree CustomCode="
		Protected _context as System.Collections.Generic.Dictionary(Of String, Integer)
		Public Property Context as System.Collections.Generic.Dictionary(Of String, Integer)
			Get
				If _context Is Nothing and Parent IsNot Nothing
					return Parent.Context
				End If
				return _context
			End Get
			Set
				_context = value
			End Set
		End Property

		Public Function GetVarValue(id as String) As Integer
			If Context Is Nothing
				Return 0
			Else
				Return Context.Item(id)
			End If
		End Function
" %>
				EOF           -> @"^\s*$";
[Color(255, 0, 0)] 		NUMBER        -> @"[0-9]+";
[Color(0, 127, 0)] 		ID            -> @"[a-zA-Z_][a-zA-Z0-9_]*";
[Color(0, 0, 255)] 		PLUSMINUS     -> @"(\+|-)";
[Color(0, 0, 255)] 		MULTDIV       -> @"\*|/";
[Color(127, 0, 127)] 	BROPEN        -> @"\(";
[Color(127, 0, 127)] 	BRCLOSE       -> @"\)";

[Skip] 			WHITESPACE    -> @"\s+";

Start -> (AddExpr)? EOF
{ Return $AddExpr };      


AddExpr -> MultExpr (PLUSMINUS MultExpr)* : Double
{ 
	Dim Value As Double = Convert.ToDouble($MultExpr)
	Dim i As Double = 1
	While ?MultExpr[i]
		Dim sign As String = $PLUSMINUS[i-1].ToString()
		If sign = "+" Then
			Value += Convert.ToDouble($MultExpr[i])
		Else 
			Value -= Convert.ToDouble($MultExpr[i])
		End If
		i=i+1
	End While
	Return Value
};

MultExpr -> Atom (MULTDIV Atom)* : Double
{
	Dim Value As Double = Convert.ToDouble($Atom)
	Dim i As Double = 1
	While ?Atom[i]
		Dim sign As String = $MULTDIV[i-1].ToString()
		If sign = "*" Then
			Value *= Convert.ToDouble($Atom[i])
		Else 
			Value /= Convert.ToDouble($Atom[i])
		End If
		i=i+1
	End While

	Return Value
};

Atom -> NUMBER |  BROPEN AddExpr BRCLOSE | ID : Double
{
	If ?NUMBER Then
		Return $NUMBER
	ElseIf ?ID
		Return Me.GetVarValue($ID)
	Else 
		Return $AddExpr
	End If
};
