//Tiny Parser Generator v1.5
//Copyright © Herre Kuijpers 2008-2012, modify by ultrasuperpingu

//@TinyPG - a Tiny Parser Generator v1.3
//Copyright © Herre Kuijpers 2008-2010
//Simple expression calculator
// https://www.codeproject.com/Articles/241830/a-Tiny-Expression-Evaluator

<% @TinyPG Language="Cpp" OutputPath="TestCpp\TinyExe" Namespace="TinyExe" %>

<% @ParseTree CustomCode={
	// helper function to find access the function or variable
	protected:
	ParseNode* GetFunctionOrVariable(ParseNode* n)
	{
		// found the right node, exit
		if (n->TokenVal.Type == TokenType::Function || n->TokenVal.Type == TokenType::VARIABLE)
			return n;

		if (n->Nodes.size() == 1) // search lower branch (left side only, may not contain other node branches)
			return GetFunctionOrVariable(n->Nodes[0]);

		// function or variable not found in branch
		return NULL;
	}
	public:
		Context* Context = NULL;
}; HeaderCode=@"#include <any>
#include <sstream>
#include <cmath>
#include ""Function.h""
#include ""Context.h""
#include ""DynamicFunction.h""
#include ""Util.h""" %>

[Color(0, 0, 255)]
BOOLEANLITERAL	-> @"true|false";
[Color(255, 0, 0)]
DECIMALINTEGERLITERAL-> @"[0-9]+(UL|Ul|uL|ul|LU|Lu|lU|lu|U|u|L|l)?";
[Color(255, 0, 0)]
REALLITERAL 		-> @"([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?([fFdDMm]?)?)|(\.[0-9]+([eE][+-]?[0-9]+)?([fFdDMm]?)?)|([0-9]+([eE][+-]?[0-9]+)([fFdDMm]?)?)|([0-9]+([fFdDMm]?))";
HEXINTEGERLITERAL	-> @"0(x|X)[0-9a-fA-F]+";
[Color(155, 0, 0)]
STRINGLITERAL		-> @"\""(\""\""|[^\""])*\"""; // shortcut implementation, not quite ready
[Color(0, 80, 0)]
FUNCTION		-> @"[a-zA-Z_][a-zA-Z0-9_]*(?=\s*\()"; // matches only when followed by (
VARIABLE		-> @"[a-zA-Z_][a-zA-Z0-9_]*(?!\s*\()"; // matches only when NOT followed by (
CONSTANT		-> @"pi|e";

BRACEOPEN		-> @"\{\s*";
BRACECLOSE		-> @"\s*\}";
BRACKETOPEN		-> @"\(\s*";
BRACKETCLOSE		-> @"\s*\)";
SEMICOLON		-> @";";
PLUSPLUS		-> @"\+\+";
MINUSMINUS		-> @"--";
PIPEPIPE		-> @"\|\||or";
AMPAMP			-> @"&&|and";
AMP			-> @"&(?!&)"; // matches only when NOT followed by second &
POWER			-> @"\^";
PLUS			-> @"\+";
MINUS			-> @"-";
EQUAL			-> @"=";
ASSIGN			-> @":=";
NOTEQUAL		-> @"!=|<>";
NOT			-> @"!";
ASTERIKS		-> @"\*";
SLASH			-> @"/";
PERCENT		-> @"%";
QUESTIONMARK		-> @"\?";
COMMA			-> @",";
LESSEQUAL		-> @"<=";
GREATEREQUAL		-> @">=";
LESSTHAN		-> @"<(?!>)"; // matches only when not followed by >
GREATERTHAN		-> @">";
COLON			-> @":";
EOF_			-> @"^$";


[Skip] WHITESPACE 	-> @"\s+";


Start -> (Expression)? EOF_
{
	return $Expression;
};

//expressions
Function -> FUNCTION BRACKETOPEN Params? BRACKETCLOSE
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	ParseNode* funcNode = this->Nodes[0];
	ParseNode* paramNode = this->Nodes[2];

	if (tree->Context == NULL)
	{
		tree->Errors.push_back(ParseError("No context defined", 1041, this));
		return NULL;
	}
	if (tree->Context->CurrentStackSize > 50)
	{
		tree->Errors.push_back(ParseError("Stack overflow: " + funcNode->TokenVal.Text + "()", 1046, this));
		return NULL;
	}
	std::string key = str_tolower(funcNode->TokenVal.Text);
	if (!containsKey(tree->Context->Functions, key))
	{
		tree->Errors.push_back(ParseError("Fuction not defined: " + funcNode->TokenVal.Text + "()", 1042, this));
		return NULL;
	}

	// retrieves the function from declared functions
	class Function* func = tree->Context->Functions[key];

	// evaluate the function parameters
	std::vector<std::any> parameters = std::vector<std::any>();
	if (paramNode->TokenVal.Type == TokenType::Params)
		parameters = std::any_cast<std::vector<std::any>>(paramNode->Eval(paramlist));
	if (parameters.size() < func->MinParameters) 
	{
		tree->Errors.push_back(ParseError("At least " + std::to_string(func->MinParameters) + " parameter(s) expected", 1043, this));
		return NULL; // illegal number of parameters
	}
	else if (parameters.size() > func->MaxParameters)
	{
		tree->Errors.push_back(ParseError("No more than " + std::to_string(func->MaxParameters) + " parameter(s) expected", 1044, this));
		return NULL; // illegal number of parameters
	}
	
	return func->Eval(parameters, tree);
};
PrimaryExpression -> Function | Variable | Literal | ParenthesizedExpression
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	TokenType type = this->Nodes[0]->TokenVal.Type;
	if (type == TokenType::Function)
		return $Function;
	else if (type == TokenType::Literal)
		return $Literal;
	else if (type == TokenType::ParenthesizedExpression)
		return $ParenthesizedExpression;
	else if (type == TokenType::Variable)
		return $Variable;

	tree->Errors.push_back(ParseError("Illegal EvalPrimaryExpression format", 1097, this));
	return NULL;
};
ParenthesizedExpression -> BRACKETOPEN Expression BRACKETCLOSE
{
	return $Expression;
};
UnaryExpression -> PrimaryExpression
				   | PLUS UnaryExpression
				   | MINUS UnaryExpression
				   | NOT UnaryExpression
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	TokenType type = this->Nodes[0]->TokenVal.Type;
	if (type == TokenType::PrimaryExpression)
		return $PrimaryExpression;

	if (type == TokenType::MINUS)
	{
		std::any val = $UnaryExpression;
		if (auto x = std::any_cast<double>(&val))
			return -*x;
		if (auto x = std::any_cast<int>(&val))
			return -*x;

		tree->Errors.push_back(ParseError("Illegal UnaryExpression format, cannot interpret minus " + ConvertToString(val), 1095, this));
		return NULL;
	}
	else if (type == TokenType::PLUS)
	{
		std::any val = $UnaryExpression;
		return val;
	}
	else if (type == TokenType::NOT)
	{
		std::any val = $UnaryExpression[0];
		if (auto x = std::any_cast<bool>(&val))
			return !(*x);

		tree->Errors.push_back(ParseError("Illegal UnaryExpression format, cannot interpret negate " + ConvertToString(val), 1098, this));
		return NULL;
	}

	tree->Errors.push_back(ParseError("Illegal UnaryExpression format", 1099, this));
	return NULL;
};

PowerExpression -> UnaryExpression (POWER UnaryExpression)*
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $UnaryExpression[0];

	// IMPORTANT: scanning and calculating the power is done from Left to Right.
	// this is conform the Excel evaluation of power, but not conform strict mathematical guidelines
	// this means that a^b^c evaluates to (a^b)^c  (Excel uses the same kind of evaluation)
	// stricly mathematical speaking a^b^c should evaluate to a^(b^c) (therefore calculating the powers from Right to Left)
	for (int i = 1; i < Nodes.size(); i += 2)
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i + 1]->Eval(paramlist);
		if (token.Type == TokenType::POWER)
			result = std::pow(ConvertToDouble(result), ConvertToDouble(val));
	}

	return result;
};
MultiplicativeExpression -> PowerExpression ((ASTERIKS | SLASH | PERCENT) PowerExpression)*
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $PowerExpression;
	for (int i = 1; i < Nodes.size(); i+=2 )
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i+1]->Eval(paramlist);
		if (token.Type == TokenType::ASTERIKS)
			result = ConvertToDouble(result) * ConvertToDouble(val);
		else if (token.Type == TokenType::SLASH)
			result = ConvertToDouble(result) / ConvertToDouble(val);
		else if (token.Type == TokenType::PERCENT)
			result = ConvertToInt32(result) % ConvertToInt32(val);
	}

	return result;
};
AdditiveExpression -> MultiplicativeExpression ((PLUS | MINUS) MultiplicativeExpression)*
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $MultiplicativeExpression[0];
	for (int i = 1; i < Nodes.size(); i += 2)
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i + 1]->Eval(paramlist);
		if (token.Type == TokenType::PLUS)
			result = ConvertToDouble(result) + ConvertToDouble(val);
		else if (token.Type == TokenType::MINUS)
			result = ConvertToDouble(result) - ConvertToDouble(val);
	}

	return result;
}; 
ConcatEpression -> AdditiveExpression (AMP AdditiveExpression)*
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $AdditiveExpression[0];
	for (int i = 1; i < Nodes.size(); i += 2)
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i + 1]->Eval(paramlist);
		if (token.Type == TokenType::AMP)
			result = ConvertToString(result) + ConvertToString(val);
	}
	return result;
};
RelationalExpression -> ConcatEpression ((LESSTHAN | LESSEQUAL | GREATERTHAN | GREATEREQUAL) ConcatEpression)?
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $ConcatEpression[0];
	for (int i = 1; i < Nodes.size(); i += 2)
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i + 1]->Eval(paramlist);

		// compare as numbers
		if (result.has_value() && result.type().name() == "double" && val.has_value() && val.type().name() == "double")
		{
			if (token.Type == TokenType::LESSTHAN)
				result = ConvertToDouble(result) < ConvertToDouble(val);
			else if (token.Type == TokenType::LESSEQUAL)
				result = ConvertToDouble(result) <= ConvertToDouble(val);
			else if (token.Type == TokenType::GREATERTHAN)
				result = ConvertToDouble(result) > ConvertToDouble(val);
			else if (token.Type == TokenType::GREATEREQUAL)
				result = ConvertToDouble(result) >= ConvertToDouble(val);
		}
		else // compare as strings
		{
			if (token.Type == TokenType::LESSTHAN)
				result = ConvertToString(result) < ConvertToString(val);
			else if (token.Type == TokenType::LESSEQUAL)
				result = ConvertToString(result) <= ConvertToString(val);
			else if (token.Type == TokenType::GREATERTHAN)
				result = ConvertToString(result) > ConvertToString(val);
			else if (token.Type == TokenType::GREATEREQUAL)
				result = ConvertToString(result) >= ConvertToString(val);
		}
		
	}
	return result;
};
EqualityExpression -> RelationalExpression ((EQUAL | NOTEQUAL) RelationalExpression)*
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $RelationalExpression[0];
	for (int i = 1; i < Nodes.size(); i += 2)
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i + 1]->Eval(paramlist);
		if (result.has_value() && !val.has_value() || !result.has_value() && val.has_value())
		{
			if (token.Type == TokenType::EQUAL)
				result = false;
			else if (token.Type == TokenType::NOTEQUAL)
				result = true;
		}
		else if (!result.has_value() && !val.has_value())
		{
			if (token.Type == TokenType::EQUAL)
				result = true;
			else if (token.Type == TokenType::NOTEQUAL)
				result = false;
		}
		else // if (result.has_value() && val.has_value())
		{
			if (result.type().name() != val.type().name())
			{
				if (token.Type == TokenType::EQUAL)
					result = true;
				else if (token.Type == TokenType::NOTEQUAL)
					result = false;
			}
			else
			{
				if (auto x = std::any_cast<bool>(&val))
				{
					if (token.Type == TokenType::EQUAL)
						result = std::any_cast<bool>(result) == std::any_cast<bool>(val);
					else if (token.Type == TokenType::NOTEQUAL)
						result = std::any_cast<bool>(result) != std::any_cast<bool>(val);
				}
				else if (auto x = std::any_cast<double>(&val))
				{
					if (token.Type == TokenType::EQUAL)
						result = std::any_cast<double>(result) == std::any_cast<double>(val);
					else if (token.Type == TokenType::NOTEQUAL)
						result = std::any_cast<double>(result) != std::any_cast<double>(val);
				}
				else if (auto x = std::any_cast<int>(&val))
				{
					if (token.Type == TokenType::EQUAL)
						result = std::any_cast<int>(result) == std::any_cast<int>(val);
					else if (token.Type == TokenType::NOTEQUAL)
						result = std::any_cast<int>(result) != std::any_cast<int>(val);
				}
				else if (auto x = std::any_cast<std::string>(&val))
				{
					if (token.Type == TokenType::EQUAL)
						result = std::any_cast<std::string>(result) == std::any_cast<std::string>(val);
					else if (token.Type == TokenType::NOTEQUAL)
						result = std::any_cast<std::string>(result) != std::any_cast<std::string>(val);
				}
			}
		}
	}
	return result;
};
ConditionalAndExpression -> EqualityExpression (AMPAMP EqualityExpression)*  //ok
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $EqualityExpression[0];
	for (int i = 1; i < Nodes.size(); i += 2)
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i + 1]->Eval(paramlist);
		if (token.Type == TokenType::AMPAMP)
			result = ConvertToBoolean(result) && ConvertToBoolean(val);
	}
	return result;
};
ConditionalOrExpression -> ConditionalAndExpression (PIPEPIPE ConditionalAndExpression)* //ok
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $ConditionalAndExpression[0];
	for (int i = 1; i < Nodes.size(); i += 2)
	{
		Token token = Nodes[i]->TokenVal;
		std::any val = Nodes[i + 1]->Eval(paramlist);
		if (token.Type == TokenType::PIPEPIPE)
			result = ConvertToBoolean(result) || ConvertToBoolean(val);
	}
	return result;
};
AssignmentExpression -> ConditionalOrExpression (QUESTIONMARK AssignmentExpression COLON AssignmentExpression)? // ok
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::any result = $ConditionalOrExpression;
	if (Nodes.size() >= 5 && result.has_value() && std::any_cast<int>(&result)
		&& Nodes[1]->TokenVal.Type == TokenType::QUESTIONMARK
		&& Nodes[3]->TokenVal.Type == TokenType::COLON)
	{
		if (ConvertToBoolean(result))
			result = Nodes[2]->Eval(paramlist); // return 1st argument
		else
			result = Nodes[4]->Eval(paramlist); // return 2nd argumen
	}
	return result;
};
Expression -> AssignmentExpression? (ASSIGN AssignmentExpression)?
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	// if only left hand side available, this is not an assignment, simple evaluate expression
	if (Nodes.size() == 1)
		return $AssignmentExpression[0]; // return the result

	if (Nodes.size() != 3)
	{
		tree->Errors.push_back(ParseError("Illegal EvalExpression format", 1092, this));
		return NULL;
	}

	// ok, this is an assignment so declare the function or variable
	// assignment only allowed to function or to a variable
	ParseNode* v = GetFunctionOrVariable(Nodes[0]);
	if (v == NULL)
	{
		tree->Errors.push_back(ParseError("Can only assign to function or variable", 1020, this));
		return NULL;
	}

	if (tree->Context == NULL)
	{
		tree->Errors.push_back(ParseError("No context defined", 1041, this));
		return NULL;
	}

	if (v->TokenVal.Type == TokenType::VARIABLE)
	{
		// simply overwrite any previous defnition
		std::string key = v->TokenVal.Text;
		tree->Context->Globals[key] = $AssignmentExpression[1];
		return tree->Context->Globals[key] ;
	}
	else if (v->TokenVal.Type == TokenType::Function)
	{

		std::string key = v->Nodes[0]->TokenVal.Text;

		// function lookup is case insensitive
		if (containsKey(tree->Context->Functions, str_tolower(key)))
		{
			auto func = tree->Context->Functions[str_tolower(key)];
			if (!func->IsDynamic())
			{
				tree->Errors.push_back(ParseError("Built in functions cannot be overwritten", 1050, this));
				return std::any();
			}
		}
		// lets determine the input variables. 
		// functions must be of te form f(x;y;z) = x+y*z;
		// check the function parameters to be of type Variable, error otherwise
		Variables* vars = new Variables();
		ParseNode* paramsNode = v->Nodes[2];
		if (paramsNode->TokenVal.Type == TokenType::Params)
		{   // function has parameters, so check if they are all variable declarations
			for (int i = 0; i < paramsNode->Nodes.size(); i += 2)
			{
				ParseNode* varNode = GetFunctionOrVariable(paramsNode->Nodes[i]);
				if (varNode == NULL || varNode->TokenVal.Type != TokenType::VARIABLE)
				{
					tree->Errors.push_back(ParseError("Function declaration may only contain variables", 1051, this));
					return NULL;
				}
				// simply declare the variable, no need to evaluate the value of it at this point. 
				// evaluation will be done when the function is executed
				// note, variables are Case Sensitive (!)
				vars->insert(std::make_pair(varNode->TokenVal.Text, std::any()));
			}
		}
		// we have all the info we need to know to declare the dynamicly defined function
		// pass on nodes[2] which is the Right Hand Side (RHS) of the assignment
		// nodes[2] will be evaluated at runtime when the function is executed.
		DynamicFunction* dynf = new DynamicFunction(key, Nodes[2], vars, (int)vars->size(), (int)vars->size());
		tree->Context->Functions[str_tolower(key)] = dynf;
		return dynf;
	}

	return std::any();
};

//literals
Params -> Expression (SEMICOLON Expression)*
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	std::vector<std::any> parameters = std::vector<std::any>();
	for (int i = 0; i < Nodes.size(); i += 2)
	{
		if (Nodes[i]->TokenVal.Type == TokenType::Expression)
		{
			std::any val = Nodes[i]->Eval(paramlist);
			parameters.push_back(val);
		}
	}
	return parameters;
};
Literal -> BOOLEANLITERAL | IntegerLiteral | RealLiteral | StringLiteral
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	TokenType type = this->Nodes[0]->TokenVal.Type;
	if (type == TokenType::StringLiteral)
		return $StringLiteral;
	else if (type == TokenType::IntegerLiteral)
		return $IntegerLiteral;
	else if (type == TokenType::RealLiteral)
		return $RealLiteral;
	else if (type == TokenType::BOOLEANLITERAL)
	{
		return $BOOLEANLITERAL == "true";
	}

	tree->Errors.push_back(ParseError("illegal Literal format", 1003, this));
	return NULL;
};
IntegerLiteral -> DECIMALINTEGERLITERAL | HEXINTEGERLITERAL
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	if (?DECIMALINTEGERLITERAL)
		return ConvertToDouble($DECIMALINTEGERLITERAL);
	if (?HEXINTEGERLITERAL)
	{
		std::string hex = $HEXINTEGERLITERAL;
		int x;
		std::stringstream ss;
		ss << std::hex << hex.substr(2, hex.length() - 2);
		ss >> x;
		return ConvertToDouble(x);
	}

	tree->Errors.push_back(ParseError("illegal IntegerLiteral format", 1002, this));
	return NULL;
};
RealLiteral -> REALLITERAL
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	if (?REALLITERAL)
	{
		return ConvertToDouble($REALLITERAL);
	}
	tree->Errors.push_back(ParseError("illegal RealLiteral format", 1001, this));
	return NULL;
};
StringLiteral -> STRINGLITERAL
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	if (?STRINGLITERAL)
	{
		std::string r = $STRINGLITERAL;
		r = r.substr(1, r.length() - 2); // strip quotes
		return r;
	}

	tree->Errors.push_back(ParseError("illegal StringLiteral format", 1000, this));
	return "";
};
Variable -> VARIABLE
{
	ParseTree* tree = std::any_cast<ParseTree*>(paramlist[0]);
	if (tree->Context == NULL)
	{
		tree->Errors.push_back(ParseError("No context defined", 1041, this));
		return NULL;
	}

	std::string key = (std::string)$VARIABLE;
	// first check if the variable was declared in scope of a function
	std::any scope_var = tree->Context->GetScopeVariable(key);
	if(scope_var.has_value())
		return scope_var;
	
	// if not in scope of a function
	// next check if the variable was declared as a global variable
	if (containsKey(tree->Context->Globals,key))
		return tree->Context->Globals[key];

	//variable not found
	tree->Errors.push_back(ParseError("Variable not defined: " + key, 1039, this));
	return std::any();
};
