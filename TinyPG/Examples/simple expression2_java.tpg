//@TinyPG - a Tiny Parser Generator v1.5
//Copyright Â© Herre Kuijpers 2008-2010
//Simple expression calculator
//
// You can test it with a simple main class like this:
//public class TestParser {
//    public static void main(String[] args) {
//        HashMap<String,Integer> context=new HashMap<>();
//        context.put("_5",5);
//        context.put("_15",15);
//        Parser p=new Parser(new Scanner());
//        ParseTree tree = p.Parse("_5*3+_15/2");
//        tree.setContext(context);
//        System.out.println(tree.Eval());
//    }    
//}

<% @TinyPG Language="Java" Namespace="tinypg" OutputPath="TestJava\SimpleExpr\src\tinypg\" %>

// this is not supported in Java
//<% @TextHighlighter Generate="true" %>

<% @ParseTree CustomCode={
	protected java.util.HashMap<String,Integer> context;
	public java.util.HashMap<String,Integer> getContext() {
		if(context == null && Parent != null)
		{
			return Parent.getContext();
		}
		return context;
	}

	public void setContext(java.util.HashMap<String,Integer> value) {
		context = value;
	}

	public int getVarValue(String id) {
		return getContext() == null?0:getContext().get(id);
	}
}; %>

			EOF         	-> @"^\s*$";
[Color(255, 0, 0)] 	NUMBER 	-> @"[0-9]+";
[Color(255, 0, 0)] 	ID	 	-> @"[a-zA-Z_][a-zA-Z0-9_]*";
[Color(0, 0, 255)] 	PLUSMINUS 	-> @"(\+|-)";
[Color(0, 0, 255)] 	MULTDIV 	-> @"\*|/";
[Color(0, 0, 255)] 	BROPEN 	-> @"\(";
[Color(0, 0, 255)] 	BRCLOSE 	-> @"\)";

[Skip] 		WHITESPACE  	-> @"\s+";

Start -> (AddExpr)? EOF : int default(0)
{ return $AddExpr; };

AddExpr -> MultExpr (PLUSMINUS MultExpr)* : int default(0)
{ 
	int Value = $MultExpr;
	int i = 1;
	while (?MultExpr[i])
	{
		String sign = $PLUSMINUS[i-1];
		if (sign.equals("+"))
			Value += $MultExpr[i++];
		else 
			Value -= $MultExpr[i++];
	}

	return Value; 
};

MultExpr -> Atom (MULTDIV Atom)* : int default(0)
{ 
	int Value = $Atom;
	int i = 1;
	while (?Atom[i])
	{
		String sign = $MULTDIV[i-1].toString();
		if (sign.equals("*"))
			Value *= $Atom[i++];
		else 
			Value /= $Atom[i++];
	}
	return Value; 
};

Atom -> NUMBER | BROPEN AddExpr BRCLOSE | ID : int default(0)
{
	if (?NUMBER)
		return Integer.parseInt($NUMBER);
	if (?ID)
		return getVarValue($ID);
	else
		return $AddExpr; 
};

