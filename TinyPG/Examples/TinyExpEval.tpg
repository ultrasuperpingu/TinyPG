//Tiny Parser Generator v1.5
//Copyright © Herre Kuijpers 2008-2012, modify by ultrasuperpingu

//@TinyPG - a Tiny Parser Generator v1.3
//Copyright © Herre Kuijpers 2008-2010
//Simple expression calculator
<% @TinyPG Language="C#" OutputPath="TestCSharp\TinyExe" Namespace="TinyExe" RegexCompiled="True"%>

// include text highlighting as part of the input window
<% @TextHighlighter Generate="true" %>
<% @ParseTree CustomCode=@"
public delegate object FunctionDelegate(object[] parameters);

public delegate object FunctionContextDelegate(object[] parameters, ContextClass context);

public abstract class Function
{

	/// <summary>
	/// define the arguments of the dynamic function
	/// </summary>
	public Dictionary<string, object> Arguments { get; protected set; }

	/// <summary>
	/// name of the function
	/// </summary>
	public string Name { get; protected set; }

	/// <summary>
	/// minimum number of allowed parameters (default = 0)
	/// </summary>
	public int MaxParameters { get; protected set; }

	/// <summary>
	/// maximum number of allowed parameters (default = 0)
	/// </summary>
	public int MinParameters { get; protected set; }

	public abstract object Eval(object[] parameters, ParseTree tree);

}
public class DynamicFunction : Function
{
	public static Dictionary<string, object> CloneVariables(Dictionary<string, object> v)
	{
		Dictionary<string, object> vars = new Dictionary<string, object>();
		foreach (string key in v.Keys)
			vars.Add(key, v[key]);

		return vars;
	}

	private ParseNode Node;


	public override object Eval(object[] parameters, ParseTree tree)
	{

		// create a new scope for the arguments
		Dictionary<string, object> pars = CloneVariables(Arguments);
		// now push a copy of the function arguments on the stack
		tree.Context.PushScope(pars);

		// assign the parameters to the current function scope variables            
		int i = 0;
		string[] keys = pars.Keys.ToArray();

		foreach (string key in keys)
			pars[key] = parameters[i++];

		// execute the function here

		object result = Node.Eval(tree, null);

		// clean up the stack
		tree.Context.PopScope();

		return result;
	}

	public DynamicFunction(string name, ParseNode node, Dictionary<string, object> args, int minParameters, int maxParameters)
	{
		Node = node;
		Arguments = args;
		MinParameters = minParameters;
		MaxParameters = maxParameters;
	}
}

public class StaticFunction : Function
{
	/// <summary>
	/// the actual function implementation
	/// </summary>
	public FunctionDelegate FunctionDelegate { get; private set; }

	public FunctionContextDelegate FunctionContextDelegate { get; private set; }

	public override object Eval(object[] parameters, ParseTree tree)
	{
		tree.Context.PushScope(null);

		object result = null;
		if (FunctionDelegate != null)
			result = FunctionDelegate(parameters);
		else if (FunctionContextDelegate != null)
			result = FunctionContextDelegate(parameters, tree.Context);
		tree.Context.PopScope();
		return result;
	}

	public StaticFunction(string name, FunctionDelegate function, int minParameters, int maxParameters)
	{
		Name = name;
		FunctionDelegate = function;
		MinParameters = minParameters;
		MaxParameters = maxParameters;
		Arguments = new Dictionary<string, object>();
	}

	public StaticFunction(string name, FunctionContextDelegate function, int minParameters, int maxParameters)
	{
		Name = name;
		FunctionContextDelegate = function;
		MinParameters = minParameters;
		MaxParameters = maxParameters;
		Arguments = new Dictionary<string, object>();
	}
}
public class Functions : Dictionary<string, Function>
{
	private static Functions defaultFunctions;
	private Random crand = new Random();

	public static Functions Defaults
	{
		get
		{
			if (defaultFunctions == null)
			{
				defaultFunctions = new Functions();
				defaultFunctions.InitDefaults();
			}
			return defaultFunctions;
		}
	}

	public void InitDefaults()
	{

		this.Add(""about"", new StaticFunction(""About"", delegate (object[] ps) { return ""@TinyExe - a Tiny Expression Evaluator v1.0\r\nby Herre Kuijpers - Copyright © 2011 under the CPOL license""; }, 0, 0));
		this.Add(""help"", new StaticFunction(""Help"", Help, 0, 0));

		// high precision functions
		this.Add(""abs"", new StaticFunction(""Abs"", delegate (object[] ps) { return Math.Abs(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""acos"", new StaticFunction(""Acos"", delegate (object[] ps) { return Math.Acos(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""asin"", new StaticFunction(""Asin"", delegate (object[] ps) { return Math.Asin(Convert.ToDouble(ps[0])); }, 1, 1));

		this.Add(""atan"", new StaticFunction(""Atan"", delegate (object[] ps) { return Math.Atan(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""atan2"", new StaticFunction(""Atan2"", delegate (object[] ps) { return Math.Atan2(Convert.ToDouble(ps[0]), Convert.ToDouble(ps[1])); }, 2, 2));
		this.Add(""ceiling"", new StaticFunction(""Ceiling"", delegate (object[] ps) { return Math.Ceiling(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""cos"", new StaticFunction(""Cos"", delegate (object[] ps) { return Math.Cos(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""cosh"", new StaticFunction(""Cosh"", delegate (object[] ps) { return Math.Cosh(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""exp"", new StaticFunction(""Exp"", delegate (object[] ps) { return Math.Exp(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""int"", new StaticFunction(""int"", delegate (object[] ps) { return (int)Math.Floor(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""fact"", new StaticFunction(""Fact"", Fact, 1, 1)); // factorials 1*2*3*4...
		this.Add(""floor"", new StaticFunction(""Floor"", delegate (object[] ps) { return Math.Floor(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""log"", new StaticFunction(""Log"", Log, 1, 2)); // log allows 1 or 2 parameters
		this.Add(""ln"", new StaticFunction(""Ln"", delegate (object[] ps) { return Math.Log(Convert.ToDouble(ps[0])); }, 1, 1));

		this.Add(""pow"", new StaticFunction(""Pow"", delegate (object[] ps) { return Math.Pow(Convert.ToDouble(ps[0]), Convert.ToDouble(ps[1])); }, 2, 2));
		this.Add(""round"", new StaticFunction(""Round"", delegate (object[] ps) { return Math.Round(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""rand"", new StaticFunction(""Rand"", delegate (object[] ps) { return crand.Next(Convert.ToInt32(ps[0])); }, 1, 1));
		this.Add(""sign"", new StaticFunction(""Sign"", delegate (object[] ps) { return Math.Sign(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""sin"", new StaticFunction(""Sin"", delegate (object[] ps) { return Math.Sin(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""sinh"", new StaticFunction(""Sinh"", delegate (object[] ps) { return Math.Sinh(Convert.ToDouble(ps[0])); }, 1, 1));
		this.Add(""sqr"", new StaticFunction(""Sqr"", delegate (object[] ps) { return Convert.ToDouble(ps[0]) * Convert.ToDouble(ps[0]); }, 1, 1));
		this.Add(""sqrt"", new StaticFunction(""Sqrt"", delegate (object[] ps) { return Math.Sqrt(Convert.ToDouble(ps[0])); }, 1, 1));
#if !WINCE
		this.Add(""trunc"", new StaticFunction(""Trunc"", delegate (object[] ps) { return Math.Truncate(Convert.ToDouble(ps[0])); }, 1, 1));
#endif
		// array functions
		this.Add(""avg"", new StaticFunction(""Avg"", Avg, 1, int.MaxValue));
		this.Add(""stdev"", new StaticFunction(""StDev"", StDev, 1, int.MaxValue));
		this.Add(""var"", new StaticFunction(""Var"", Var, 1, int.MaxValue));
		this.Add(""max"", new StaticFunction(""Max"", Max, 1, int.MaxValue));
		this.Add(""median"", new StaticFunction(""Median"", Median, 1, int.MaxValue));
		this.Add(""min"", new StaticFunction(""Min"", Min, 1, int.MaxValue));

		//boolean functions
		this.Add(""not"", new StaticFunction(""Not"", delegate (object[] ps) { return !Convert.ToBoolean(ps[0]); }, 1, 1));
		this.Add(""if"", new StaticFunction(""If"", delegate (object[] ps) { return Convert.ToBoolean(ps[0]) ? ps[1] : ps[2]; }, 3, 3));
		this.Add(""and"", new StaticFunction(""And"", delegate (object[] ps) { return Convert.ToBoolean(ps[0]) && Convert.ToBoolean(ps[1]); }, 2, 2));
		this.Add(""or"", new StaticFunction(""Or"", delegate (object[] ps) { return Convert.ToBoolean(ps[0]) || Convert.ToBoolean(ps[1]); }, 2, 2));

		// string functions
		this.Add(""left"", new StaticFunction(""Left"", delegate (object[] ps)
		{
			int len = Convert.ToInt32(ps[1]) < ps[0].ToString().Length ? Convert.ToInt32(ps[1]) : ps[0].ToString().Length;
			return ps[0].ToString().Substring(0, len);
		}, 2, 2));

		this.Add(""right"", new StaticFunction(""Right"", delegate (object[] ps)
		{
			int len = Convert.ToInt32(ps[1]) < ps[0].ToString().Length ? Convert.ToInt32(ps[1]) : ps[0].ToString().Length;
			return ps[0].ToString().Substring(ps[0].ToString().Length - len, len);
		}, 2, 2));

		this.Add(""mid"", new StaticFunction(""Mid"", delegate (object[] ps)
		{
			int idx = Convert.ToInt32(ps[1]) < ps[0].ToString().Length ? Convert.ToInt32(ps[1]) : ps[0].ToString().Length;
			int len = Convert.ToInt32(ps[2]) < ps[0].ToString().Length - idx ? Convert.ToInt32(ps[2]) : ps[0].ToString().Length - idx;
			return ps[0].ToString().Substring(idx, len);
		}, 3, 3));

		this.Add(""hex"", new StaticFunction(""Hex"", delegate (object[] ps) { return String.Format(""0x{0:X}"", Convert.ToInt32(ps[0].ToString())); }, 1, 1));
		this.Add(""format"", new StaticFunction(""Format"", delegate (object[] ps) { return string.Format(ps[0].ToString(), ps[1]); }, 2, 2));
		this.Add(""len"", new StaticFunction(""Len"", delegate (object[] ps) { return Convert.ToDouble(ps[0].ToString().Length); }, 1, 1));
		this.Add(""lower"", new StaticFunction(""Lower"", delegate (object[] ps) { return ps[0].ToString().ToLowerInvariant(); }, 1, 1));
		this.Add(""upper"", new StaticFunction(""Upper"", delegate (object[] ps) { return ps[0].ToString().ToUpperInvariant(); }, 1, 1));
		this.Add(""val"", new StaticFunction(""Val"", delegate (object[] ps) { return Convert.ToDouble(ps[0]); }, 1, 1));

		this.Add(""rshift"", new StaticFunction(""rshift"", delegate (object[] ps) {
			return Convert.ToInt32(ps[0]) >> Convert.ToInt32(ps[1]);
		}, 2, 2));
		this.Add(""lshift"", new StaticFunction(""lshift"", delegate (object[] ps) {
			return Convert.ToInt32(ps[0]) << Convert.ToInt32(ps[1]);
		}, 2, 2));
		this.Add(""bitand"", new StaticFunction(""bitand"", delegate (object[] ps) {
			return Convert.ToInt32(ps[0]) & Convert.ToInt32(ps[1]);
		}, 2, 2));
		this.Add(""bitor"", new StaticFunction(""bitor"", delegate (object[] ps) {
			return Convert.ToInt32(ps[0]) | Convert.ToInt32(ps[1]);
		}, 2, 2));
		this.Add(""bitxor"", new StaticFunction(""bitxor"", delegate (object[] ps) {
			return Convert.ToInt32(ps[0]) ^ Convert.ToInt32(ps[1]);
		}, 2, 2));

	}

	private static object Avg(object[] ps)
	{
		double total = 0;
		foreach (object o in ps)
			total += Convert.ToDouble(o);

		return total / ps.Length;
	}

	private static object Median(object[] ps)
	{
		object[] ordered = ps.OrderBy(o => Convert.ToDouble(o)).ToArray();

		if (ordered.Length % 2 == 1)
			return ordered[ordered.Length / 2];
		else
			return (Convert.ToDouble(ordered[ordered.Length / 2]) + Convert.ToDouble(ordered[ordered.Length / 2-1]))/2;
	}

	private static object Var(object[] ps)
	{
		double avg = Convert.ToDouble(Avg(ps));
		double total = 0;
		foreach (object o in ps)
			total += (Convert.ToDouble(o) - avg) * (Convert.ToDouble(o) - avg);

		return total / (ps.Length-1);
	}

	private static object StDev(object[] ps)
	{
		double var = Convert.ToDouble(Var(ps));
		return Math.Sqrt(var);
	}

	private static object Log(object[] ps)
	{
		if (ps.Length == 1)
			return Math.Log10(Convert.ToDouble(ps[0]));

		if (ps.Length == 2)
			return Math.Log(Convert.ToDouble(ps[0])) / Math.Log(Convert.ToDouble(ps[1]));

		return null;
	}

	private static object Fact(object[] ps)
	{
		double total = 1;

		for (int i = Convert.ToInt32(ps[0]); i > 1; i--)
			total *= i;

		return total;
	}

	private static object Max(object[] ps)
	{
		double max = double.MinValue;

		foreach (object o in ps)
		{
			double val = Convert.ToDouble(o);
			if (val > max)
				max = val;
		}
		return max;
	}

	private static object Min(object[] ps)
	{
		double min = double.MaxValue;

		foreach (object o in ps)
		{
			double val = Convert.ToDouble(o);
			if (val < min)
				min = val;
		}
		return min;
	}

	private static object Help(object[] ps)
	{
		StringBuilder help = new StringBuilder();
		help.AppendLine(""Tiny Expression Evalutator can evaluate expression containing the following functions:"");
		string[] keys = Functions.Defaults.Keys.OrderBy(s => s).ToArray();
		foreach (string key in keys)
		{
			Function func = Functions.Defaults[key];
			help.Append(func.Name + "" "");
		}
		return help.ToString();
	}

}

public class ContextClass
{
	private static ContextClass defaultContext;
	public static ContextClass Default
	{
		get
		{
			if (defaultContext == null)
				defaultContext = new ContextClass();
			return defaultContext;
		}
	}

	// list of functions currently in scope during an evaluation
	// note that this typically is NOT thread safe.

	// contains a list of variables that is in scope. Scope is used only for DynamicFunctions (for now)
	private List<Dictionary<string, object>> inScope;

	public Functions Functions { get; private set; }
	public Dictionary<string, object> Globals { get; private set; }

	public int CurrentStackSize
	{
		get
		{
			return inScope.Count;
		}
	}

	public Dictionary<string, object> CurrentScope
	{
		get
		{
			if (inScope.Count <= 0)
				return null;

			return inScope[inScope.Count-1];
		}
	}

	public object GetScopeVariable(string key)
	{
		foreach (var scope in inScope.Reverse<Dictionary<string, object>>())
		{
			if (scope != null && scope.ContainsKey(key))
				return scope[key];
		}
		return null;
	}

	public void PushScope(Dictionary<string, object> vars)
	{
		inScope.Add(vars);
	}

	public Dictionary<string, object> PopScope()
	{
		if (inScope.Count <= 0)
			return null;

		Dictionary<string, object> vars = inScope[inScope.Count-1];
		inScope.RemoveAt(inScope.Count - 1);
		return vars;
	}

	public ContextClass()
	{
		Reset();
	}

	public void Reset()
	{
		inScope = new List<Dictionary<string, object>>();
		Functions = new Functions();
		Globals = new Dictionary<string, object>();
		Functions.InitDefaults();
		Globals[""Pi""] = 3.1415926535897932384626433832795; // Math.Pi is not very precise
		Globals[""E""] = 2.7182818284590452353602874713527;  // Math.E is not very precise either
	}

	/// <summary>
	/// Thats not a Deep clone!
	/// Functions and Globals are shared!
	/// </summary>
	public ContextClass Clone()
	{
		var c = new ContextClass();
		c.Globals = this.Globals;
		c.Functions = this.Functions;
		return c;
	}
}

// helper function to find access the function or variable
private ParseNode GetFunctionOrVariable(ParseNode n)
{
	// found the right node, exit
	if (n.Token.Type == TokenType.Function || n.Token.Type == TokenType.VARIABLE)
		return n;

	if (n.Nodes.Count == 1) // search lower branch (left side only, may not contain other node branches)
		return GetFunctionOrVariable(n.Nodes[0]);

	// function or variable not found in branch
	return null;
}
public ContextClass Context = new ContextClass();" %>

[Color(0, 0, 255)]
BOOLEANLITERAL	-> @"true|false";
[Color(255, 0, 0)]
DECIMALINTEGERLITERAL-> @"[0-9]+(UL|Ul|uL|ul|LU|Lu|lU|lu|U|u|L|l)?";
[Color(255, 0, 0)]
REALLITERAL 		-> @"([0-9]+\.[0-9]+([eE][+-]?[0-9]+)?([fFdDMm]?)?)|(\.[0-9]+([eE][+-]?[0-9]+)?([fFdDMm]?)?)|([0-9]+([eE][+-]?[0-9]+)([fFdDMm]?)?)|([0-9]+([fFdDMm]?))";
HEXINTEGERLITERAL	-> @"0(x|X)[0-9a-fA-F]+";
[Color(155, 0, 0)]
STRINGLITERAL		-> @"\""(\""\""|[^\""])*\"""; // shortcut implementation, not quite ready
[Color(0, 80, 0)]
FUNCTION		-> @"[a-zA-Z_][a-zA-Z0-9_]*(?=\s*\()"; // matches only when followed by (
VARIABLE		-> @"[a-zA-Z_][a-zA-Z0-9_]*(?!\s*\()"; // matches only when NOT followed by (
CONSTANT		-> @"(?i)pi|e";

BRACEOPEN		-> @"{\s*";
BRACECLOSE		-> @"\s*}";
BRACKETOPEN		-> @"\(\s*";
BRACKETCLOSE		-> @"\s*\)";
SEMICOLON		-> @";";
PLUSPLUS		-> @"\+\+";
MINUSMINUS		-> @"--";
PIPEPIPE		-> @"\|\||or";
AMPAMP			-> @"&&|and";
AMP			-> @"&(?!&)"; // matches only when NOT followed by second &
POWER			-> @"\^";
PLUS			-> @"\+";
MINUS			-> @"-";
EQUAL			-> @"=";
ASSIGN			-> @":=";
NOTEQUAL		-> @"!=|<>";
NOT			-> @"!";
ASTERIKS		-> @"\*";
SLASH			-> @"/";
PERCENT		-> @"%";
QUESTIONMARK		-> @"\?";
COMMA			-> @",";
LESSEQUAL		-> @"<=";
GREATEREQUAL		-> @">=";
LESSTHAN		-> @"<(?!>)"; // matches only when not followed by >
GREATERTHAN		-> @">";
COLON			-> @":";
EOF_			-> @"^$";


[Skip] WHITESPACE 	-> @"\s+";


Start -> (Expression)? EOF_
{
	return $Expression;
};

//expressions
Function			-> FUNCTION BRACKETOPEN Params? BRACKETCLOSE
{
	ParseNode funcNode = this.nodes[0];
	ParseNode paramNode = this.nodes[2];

	if (tree.Context == null)
	{
		tree.Errors.Add(new ParseError("No context defined", 1041, this));
		return null;
	}
	if (tree.Context.CurrentStackSize > 50)
	{
		tree.Errors.Add(new ParseError("Stack overflow: " + funcNode.Token.Text + "()", 1046, this));
		return null;
	}
	string key = funcNode.Token.Text.ToLowerInvariant();
	if (!tree.Context.Functions.ContainsKey(key))
	{
		tree.Errors.Add(new ParseError("Fuction not defined: " + funcNode.Token.Text + "()", 1042, this));
		return null;
	}

	// retrieves the function from declared functions
	Function func = tree.Context.Functions[key];

	// evaluate the function parameters
	object[] parameters = new object[0];
	if (paramNode.Token.Type == TokenType.Params)
		parameters = (paramNode.Eval(tree, paramlist) as List<object>).ToArray();
	if (parameters.Length < func.MinParameters) 
	{
		tree.Errors.Add(new ParseError("At least " + func.MinParameters.ToString() + " parameter(s) expected", 1043, this));
		return null; // illegal number of parameters
	}
	else if (parameters.Length > func.MaxParameters)
	{
		tree.Errors.Add(new ParseError("No more than " + func.MaxParameters.ToString() + " parameter(s) expected", 1044, this));
		return null; // illegal number of parameters
	}
	
	var fres = func.Eval(parameters, tree);
	//string t_params = String.Join("; ", parameters);
	//Tracer.Trace("Func", "Eval "+func.Name+"("+ t_params + ") = "+fres);
	return fres;
};
PrimaryExpression		-> Function | Variable | Literal | ParenthesizedExpression // recheck
{
	TokenType type = this.nodes[0].Token.Type;
	if (type == TokenType.Function)
		return $Function;
	else if (type == TokenType.Literal)
		return $Literal;
	else if (type == TokenType.ParenthesizedExpression)
		return $ParenthesizedExpression;
	else if (type == TokenType.Variable)
		return $Variable;

	tree.Errors.Add(new ParseError("Illegal EvalPrimaryExpression format", 1097, this));
	return null;
};
ParenthesizedExpression	-> BRACKETOPEN Expression BRACKETCLOSE
{
	return $Expression;
};
UnaryExpression		-> PrimaryExpression
	    			   | PLUS UnaryExpression
				   | MINUS UnaryExpression
				   | NOT UnaryExpression
{
	TokenType type = this.nodes[0].Token.Type;
	if (type == TokenType.PrimaryExpression)
		return $PrimaryExpression;

	if (type == TokenType.MINUS)
	{
		object val = $UnaryExpression;
		if (val is double)
			return -((double)val);

		tree.Errors.Add(new ParseError("Illegal UnaryExpression format, cannot interpret minus " + val.ToString(), 1095, this));
		return null;
	}
	else if (type == TokenType.PLUS)
	{
		object val = $UnaryExpression;
		return val;
	}
	else if (type == TokenType.NOT)
	{
		object val = $UnaryExpression[0];
		if (val is bool)
			return !((bool)val);

		tree.Errors.Add(new ParseError("Illegal UnaryExpression format, cannot interpret negate " + val.ToString(), 1098, this));
		return null;
	}

	tree.Errors.Add(new ParseError("Illegal UnaryExpression format", 1099, this));
	return null;
};

PowerExpression		-> UnaryExpression (POWER UnaryExpression)* //ok
{
	object result = $UnaryExpression[0];

	// IMPORTANT: scanning and calculating the power is done from Left to Right.
	// this is conform the Excel evaluation of power, but not conform strict mathematical guidelines
	// this means that a^b^c evaluates to (a^b)^c  (Excel uses the same kind of evaluation)
	// stricly mathematical speaking a^b^c should evaluate to a^(b^c) (therefore calculating the powers from Right to Left)
	for (int i = 1; i < nodes.Count; i += 2)
	{
		Token token = nodes[i].Token;
		object val = nodes[i + 1].Eval(tree, paramlist);
		if (token.Type == TokenType.POWER)
			result = Math.Pow(Convert.ToDouble(result), Convert.ToDouble(val));
	}

	return result;
};
MultiplicativeExpression	-> PowerExpression ((ASTERIKS | SLASH | PERCENT) PowerExpression)* // ok
{
	object result = $PowerExpression;
	for (int i = 1; i < nodes.Count; i+=2 )
	{
		Token token = nodes[i].Token;
		object val = nodes[i+1].Eval(tree, paramlist);
		if (token.Type == TokenType.ASTERIKS)
			result = Convert.ToDouble(result) * Convert.ToDouble(val);
		else if (token.Type == TokenType.SLASH)
				result = Convert.ToDouble(result) / Convert.ToDouble(val);
		else if (token.Type == TokenType.PERCENT)
			result = Convert.ToDouble(result) % Convert.ToDouble(val);
	}

	return result;
};
AdditiveExpression		-> MultiplicativeExpression ((PLUS | MINUS) MultiplicativeExpression)*
{
	object result = $MultiplicativeExpression[0];
	for (int i = 1; i < nodes.Count; i += 2)
	{
		Token token = nodes[i].Token;
		object val = nodes[i + 1].Eval(tree, paramlist);
		if (token.Type == TokenType.PLUS)
			result = Convert.ToDouble(result) + Convert.ToDouble(val);
		else if (token.Type == TokenType.MINUS)
			result = Convert.ToDouble(result) - Convert.ToDouble(val);
	}

	return result;
}; 
ConcatEpression 		-> AdditiveExpression (AMP AdditiveExpression)*
{
	object result = $AdditiveExpression[0];
	for (int i = 1; i < nodes.Count; i += 2)
	{
		Token token = nodes[i].Token;
		object val = nodes[i + 1].Eval(tree, paramlist);
		if (token.Type == TokenType.AMP)
			result = Convert.ToString(result) + Convert.ToString(val);
	}
	return result;
};
RelationalExpression		-> ConcatEpression ((LESSTHAN | LESSEQUAL | GREATERTHAN | GREATEREQUAL) ConcatEpression)?
{
	object result = $ConcatEpression[0];
	for (int i = 1; i < nodes.Count; i += 2)
	{
		Token token = nodes[i].Token;
		object val = nodes[i + 1].Eval(tree, paramlist);

		// compare as numbers
		if (result is double && val is double)
		{
			if (token.Type == TokenType.LESSTHAN)
				result = Convert.ToDouble(result) < Convert.ToDouble(val);
			else if (token.Type == TokenType.LESSEQUAL)
				result = Convert.ToDouble(result) <= Convert.ToDouble(val);
			else if (token.Type == TokenType.GREATERTHAN)
				result = Convert.ToDouble(result) > Convert.ToDouble(val);
			else if (token.Type == TokenType.GREATEREQUAL)
				result = Convert.ToDouble(result) >= Convert.ToDouble(val);
		}
		else // compare as strings
		{
			int comp = string.Compare(Convert.ToString(result), Convert.ToString(val));
			if (token.Type == TokenType.LESSTHAN)
				result = comp < 0;
			else if (token.Type == TokenType.LESSEQUAL)
				result = comp <= 0;
			else if (token.Type == TokenType.GREATERTHAN)
				result = comp > 0;
			else if (token.Type == TokenType.GREATEREQUAL)
				result = comp >= 0;
		}
		
	}
	return result;
};
EqualityExpression		-> RelationalExpression ((EQUAL | NOTEQUAL) RelationalExpression)*
{
	object result = $RelationalExpression[0];
	for (int i = 1; i < nodes.Count; i += 2)
	{
		Token token = nodes[i].Token;
		object val = nodes[i + 1].Eval(tree, paramlist);
		if (token.Type == TokenType.EQUAL)
			result = object.Equals(result, val);
		else if (token.Type == TokenType.NOTEQUAL)
			result = !object.Equals(result, val);
	}
	return result;
};
ConditionalAndExpression	-> EqualityExpression (AMPAMP EqualityExpression)*  //ok
{
	object result = $EqualityExpression[0];
	for (int i = 1; i < nodes.Count; i += 2)
	{
		Token token = nodes[i].Token;
		object val = nodes[i + 1].Eval(tree, paramlist);
		if (token.Type == TokenType.AMPAMP)
			result = Convert.ToBoolean(result) && Convert.ToBoolean(val);
	}
	return result;
};
ConditionalOrExpression 	-> ConditionalAndExpression (PIPEPIPE ConditionalAndExpression)* //ok
{
	object result = $ConditionalAndExpression[0];
	for (int i = 1; i < nodes.Count; i += 2)
	{
		Token token = nodes[i].Token;
		object val = nodes[i + 1].Eval(tree, paramlist);
		if (token.Type == TokenType.PIPEPIPE)
			result = Convert.ToBoolean(result) || Convert.ToBoolean(val);
	}
	return result;
};
AssignmentExpression		-> ConditionalOrExpression (QUESTIONMARK AssignmentExpression COLON AssignmentExpression)? // ok
{
	object result = $ConditionalOrExpression;
	if (nodes.Count >= 5 && result is bool 
		&& nodes[1].Token.Type == TokenType.QUESTIONMARK
		&& nodes[3].Token.Type == TokenType.COLON)
	{
		if (Convert.ToBoolean(result))
			result = nodes[2].Eval(tree, paramlist); // return 1st argument
		else
			result = nodes[4].Eval(tree, paramlist); // return 2nd argumen
	}
	return result;
};
Expression		 	-> AssignmentExpression? (ASSIGN AssignmentExpression)?
{
	// if only left hand side available, this is not an assignment, simple evaluate expression
	if (nodes.Count == 1)                 
		return $AssignmentExpression[0]; // return the result

	if (nodes.Count != 3)
	{
		tree.Errors.Add(new ParseError("Illegal EvalExpression format", 1092, this));
		return null;
	}

	// ok, this is an assignment so declare the function or variable
	// assignment only allowed to function or to a variable
	ParseNode v = GetFunctionOrVariable(nodes[0]);
	if (v == null)
	{
		tree.Errors.Add(new ParseError("Can only assign to function or variable", 1020, this));
		return null;
	}

	if (tree.Context == null)
	{
		tree.Errors.Add(new ParseError("No context defined", 1041, this));
		return null;
	}

	if (v.Token.Type == TokenType.VARIABLE)
	{

		// simply overwrite any previous defnition
		string key = v.Token.Text;
		tree.Context.Globals[key] = $AssignmentExpression[1];
		return null;
	}
	else if (v.Token.Type == TokenType.Function)
	{

		string key = v.Nodes[0].Token.Text;

		// function lookup is case insensitive
		if (tree.Context.Functions.ContainsKey(key.ToLower()))
			if (!(tree.Context.Functions[key.ToLower()] is DynamicFunction))
			{
				tree.Errors.Add(new ParseError("Built in functions cannot be overwritten", 1050, this));
				return null;
			}

		// lets determine the input variables. 
		// functions must be of te form f(x;y;z) = x+y*z;
		// check the function parameters to be of type Variable, error otherwise
		Dictionary<string, object> vars = new Dictionary<string, object>();
		ParseNode paramsNode = v.Nodes[2];
		if (paramsNode.Token.Type == TokenType.Params)
		{   // function has parameters, so check if they are all variable declarations
			for (int i = 0; i < paramsNode.Nodes.Count; i += 2)
			{
				ParseNode varNode = GetFunctionOrVariable(paramsNode.Nodes[i]);
				if (varNode == null || varNode.Token.Type != TokenType.VARIABLE)
				{
					tree.Errors.Add(new ParseError("Function declaration may only contain variables", 1051, this));
					return null;
				}
				// simply declare the variable, no need to evaluate the value of it at this point. 
				// evaluation will be done when the function is executed
				// note, variables are Case Sensitive (!)
				vars.Add(varNode.Token.Text, null);
			}
		}
		// we have all the info we need to know to declare the dynamicly defined function
		// pass on nodes[2] which is the Right Hand Side (RHS) of the assignment
		// nodes[2] will be evaluated at runtime when the function is executed.
		DynamicFunction dynf = new DynamicFunction(key, nodes[2], vars, vars.Count, vars.Count);
		tree.Context.Functions[key.ToLower()] = dynf;
		return null;
	}

	

	// in an assignment, dont return any result (basically void)
	return null;
};
//literals
Params				-> Expression (SEMICOLON Expression)*
{
	List<object> parameters = new List<object>();
	for (int i = 0; i < nodes.Count; i += 2)
	{
		if (nodes[i].Token.Type == TokenType.Expression)
		{
			object val = nodes[i].Eval(tree, paramlist);
			parameters.Add(val);
		}
	}
	return parameters;
};
Literal 			-> BOOLEANLITERAL | IntegerLiteral | RealLiteral | StringLiteral
{
	TokenType type = this.nodes[0].Token.Type;
	if (type == TokenType.StringLiteral)
		return $StringLiteral;
	else if (type == TokenType.IntegerLiteral)
		return $IntegerLiteral;
	else if (type == TokenType.RealLiteral)
		return $RealLiteral;
	else if (type == TokenType.BOOLEANLITERAL)
	{
		string val = $BOOLEANLITERAL.ToString();
		return Convert.ToBoolean(val);
	}

	tree.Errors.Add(new ParseError("illegal Literal format", 1003, this));
	return null;
};
IntegerLiteral 		-> DECIMALINTEGERLITERAL | HEXINTEGERLITERAL
 {
	if ($DECIMALINTEGERLITERAL != null)
		return Convert.ToDouble($DECIMALINTEGERLITERAL);
	if ($HEXINTEGERLITERAL != null)
	{
		string hex = $HEXINTEGERLITERAL.ToString();
		return Convert.ToDouble(Convert.ToInt64(hex.Substring(2, hex.Length - 2), 16));
	}

	tree.Errors.Add(new ParseError("illegal IntegerLiteral format", 1002, this));
	return null;
};
RealLiteral 			-> REALLITERAL
{
	if ($REALLITERAL != null)
	{
		string val = string.Format(CultureInfo.InvariantCulture, "{0}", $REALLITERAL);
		return double.Parse(val, CultureInfo.InvariantCulture);
	}
	tree.Errors.Add(new ParseError("illegal RealLiteral format", 1001, this));
	return null;
};
StringLiteral			-> STRINGLITERAL
{
	if ($STRINGLITERAL != null)
	{
		string r = (string)$STRINGLITERAL;
		r = r.Substring(1, r.Length - 2); // strip quotes
		return r;
	}

	tree.Errors.Add(new ParseError("illegal StringLiteral format", 1000, this));
	return string.Empty;
};
Variable 			-> VARIABLE
{
	if (tree.Context == null)
	{
		tree.Errors.Add(new ParseError("No context defined", 1041, this));
		return null;
	}

	string key = (string)$VARIABLE;
	// first check if the variable was declared in scope of a function
	var scope_var = tree.Context.GetScopeVariable(key);
	if(scope_var != null)
		return scope_var;
	
	// if not in scope of a function
	// next check if the variable was declared as a global variable
	if (tree.Context.Globals != null && tree.Context.Globals.ContainsKey(key))
		return tree.Context.Globals[key];

	//variable not found
	tree.Errors.Add(new ParseError("Variable not defined: " + key, 1039, this));
	return null;
};